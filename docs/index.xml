<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home Page on Huija&#39;s Blog</title>
    <link>https://huija.github.io/</link>
    <description>Recent content in Home Page on Huija&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 18 Apr 2021 21:35:19 +0800</lastBuildDate><atom:link href="https://huija.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mongodb 复制集</title>
      <link>https://huija.github.io/mongodb-replicaset/</link>
      <pubDate>Fri, 07 May 2021 13:37:16 +0800</pubDate>
      
      <guid>https://huija.github.io/mongodb-replicaset/</guid>
      <description>MongoDB复制集 MongoDB复制集是MongoDB分布式系统的核心.
 mongodb的api对于单点,复制集,分片集群都通用的, 这也就意味着, 改变底层架构, 对于代码基本无需改动.
 浅谈复制集 先撇开MongoDB单独来讲复制集群, 顾名思义, 就是从原先的机器复制一份, 一起部署, 在分布式场景是很常见的部署架构, 以数据库们为例, 就有MySQL基于binlog的主从部署, PostgreSQL基于WAL日志的同步/异步流复制, Redis的主从复制等.
复制集的意义  复制集本身, 解决的根本问题是, 单机部署的单点故障问题, 当主节点挂掉, 可以转正从节点, 也就是数据冗余以及高可用. 衍生出来的, 是可以进行读写分流, 并针对读的流量进行横向扩展, 也就是可伸缩性与负载均衡.  复制集的问题 复制集的最核心的问题集中于消息从主节点到从节点的备份策略, 同步还是异步
 如果同步备份, 那么会保证每个操作后, 主从的数据都是一致的, 也就是强一致性, 但是如果从节点挂了, 使用同步的策略, 那主节点的请求是否要返回失败, 这就涉及可用性的问题. 一般数据库的主流策略都是异步, 不追求数据的强一致性, 而是最终一致性, 重点保证可用性, 而实时性问题, 则通过一定手段进行避免.  MongoDB复制集 MongoDB的主从叫Primary和Secondary, 其复制集由一个Primary和多个Secondary组成, Primary可以进行读写操作, Secondary回放Primary发送的oplog, 进行数据备份.
 还有一种节点类型, 叫Arbiter, 仲裁者, 其主要负责选举投票, 而不进行数据备份, 也不能竞选Primary.
 典型的三节点部署 主节点的选举条件是需要半数以上的投票节点投票, 一般节点数量都会设置为单数, 也就是2n+1, 最多支持挂掉n个节点, 集群仍然能正常工作, 与2(n+1)个节点能够容忍的数量是一样的, 所以一般节点数(具有投票权)都是单数</description>
    </item>
    
    <item>
      <title>MongoDB入门</title>
      <link>https://huija.github.io/mongodb-starter/</link>
      <pubDate>Thu, 29 Apr 2021 09:44:48 +0800</pubDate>
      
      <guid>https://huija.github.io/mongodb-starter/</guid>
      <description>MongoDB入门 MongoDB是面向文档的数据库, 有区别于传统的RDBMS(Oracle,MySQL,PostgreSQL&amp;hellip;), 是一个基于文档(BSON)存储的开源数据库系统.
最直观感受  表在MongoDB内叫集合, 英文名Collection, 表示一批同类文档的集合 每一行数据在MongoDB内可以叫一个文档, 英文Document, 存储格式Binary Json, 可以简单类比为Json MongoDB是NoSQL数据库, 有自己的语法规则, 也就是不使用SQL进行CRUD(但是其BI Connector支持模拟MySQL进行查询) MongoDB推崇Schema Less, 无需提前设计表的结构, 同一个集合内的文档可以有不同的字段  理解Document概念 文档是文档型数据库的数据存储格式, 从根本上影响使用人员的方方面面.
 传统的RDBMS是基于Relation Model, 需要开发人员对现实业务进行抽象, 根据范式标准设计表结构, 使用联表查询来表示完整的事物结构, 关键词: 主键, 外键, 关系模型, 三范式. 文档的存储可以理解为存了一个Json, 特性是支持对象模型的灵活组合, 一般情况下, 无需进行过度的设计拆分, 此外, 可以灵活地增删列是其一大核心优势, 关键词: 组合, Schema Less  业务设计举例 商品, 出入库设计
 传统RDBMS会设计为, &amp;lsquo;商品表&amp;rsquo;+&amp;lsquo;出入库表&amp;rsquo;, 以商品ID作为外键进行关联 作为文档型数据库, MongoDB只需要一个&amp;rsquo;商品表&#39;, 而出入库记录作为商品表的一个数组类型字段直接存在一起.  Binary Json MongoDB自己设计使用的Bson, 类似Json格式, 支持更多的数据类型: https://docs.mongodb.com/manual/reference/bson-types/
 Bson实际就是一种buffer编码规则, 对外呈现Json格式, 客户端以Bson为参数, 对MongoDB进行RPC调用, 然后得到同样为Bson格式的返回结果.</description>
    </item>
    
    <item>
      <title>Hello Hugo</title>
      <link>https://huija.github.io/hello-hugo/</link>
      <pubDate>Sun, 18 Apr 2021 21:24:41 +0800</pubDate>
      
      <guid>https://huija.github.io/hello-hugo/</guid>
      <description>Hello Hugo!</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://huija.github.io/about/</link>
      <pubDate>Sun, 18 Apr 2021 21:18:19 +0800</pubDate>
      
      <guid>https://huija.github.io/about/</guid>
      <description> 🔭 I’m currently working on JiangSu-WuXi 🌱 I’m currently learning Kubernetes 💬 Ask me: Wechat:zhj1150555483 📫 Reach me: zhj3212j@outlook.com 😄 Skills: Go,Java,Linux,MySQL,Redis,Mongo,Kafka,PG... ⚡ WeChat Public Account: 从入门到删库跑路 ⛵ Github: https://github.com/huija  </description>
    </item>
    
  </channel>
</rss>
